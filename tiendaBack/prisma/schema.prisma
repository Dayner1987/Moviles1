generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  RolesID Int     @id @default(autoincrement())
  NameRol String  @db.VarChar(45)
  users   users[]
}

model users {
  clientID      Int      @id @default(autoincrement())
  Roles_RolesID Int
  Name1         String   @db.VarChar(20)
  Name2         String?  @db.VarChar(20)
  LastName1     String   @db.VarChar(20)
  LastName2     String?  @db.VarChar(20)
  CI            Int      @unique
  Email         String   @unique @db.VarChar(50) 
  Address       String   @db.VarChar(30)
  Password      String   @db.VarChar(600)
  orders        orders[]
  roles         roles    @relation(fields: [Roles_RolesID], references: [RolesID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Users_Roles")

  @@index([Roles_RolesID], map: "fk_Users_Roles_idx")
}

model categories {
  CategoriesID    Int        @id @default(autoincrement())
  Name_categories String     @db.VarChar(45)
  products        products[]
}

model products {
  ProductsID   Int        @id @default(autoincrement())
  CategoryID   Int
  Name_product String     @db.VarChar(45)
  Price        Float      @db.Float
  Description  String     @db.VarChar(45)
  Amount       Int
  imageUri     String?    @db.VarChar(255)

  categories   categories @relation(fields: [CategoryID], references: [CategoriesID], onDelete: NoAction, onUpdate: NoAction, map: "fk_Products_Categories")
  orderItems   order_items[] @relation("ProductOrderItems") // <-- solo referencia
}


model orders {
  OrdersID       Int           @id @default(autoincrement())
  UserID         Int
  Date_order     DateTime      @db.Date
  United_price   Float         @db.Float
  StatusOrderID  Int

  users          users         @relation(fields: [UserID], references: [clientID])
  order_status   order_status  @relation(fields: [StatusOrderID], references: [idEstado])
  items          order_items[]

  @@index([UserID])
  @@index([StatusOrderID])
}

model order_items {
  id        Int      @id @default(autoincrement())
  OrderID   Int
  ProductID Int
  Quantity  Int
  Price     Float

  order    orders   @relation(fields: [OrderID], references: [OrdersID])
  product  products @relation("ProductOrderItems", fields: [ProductID], references: [ProductsID], onDelete: Cascade) // ✅ Aquí va onDelete

  @@index([OrderID])
  @@index([ProductID])
}


model order_status {
  idEstado Int     @id @default(autoincrement())
  estado   Boolean @default(false)
  orders   orders[]
}

